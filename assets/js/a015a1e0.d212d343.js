"use strict";(self.webpackChunkotiv_simulator_doc=self.webpackChunkotiv_simulator_doc||[]).push([[7611],{2182:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=s(4848),t=s(8453);const r={id:"Settings",title:"Settings",sidebar_label:"Settings"},l="Settings",o={id:"Simulator/Settings",title:"Settings",description:"The simulator contains two JSON files, one of which configures various aspects of the simulator's operation, named settingstramsim.json. Here are the settings available in this file:",source:"@site/docs/Simulator/Settings.md",sourceDirName:"Simulator",slug:"/Simulator/Settings",permalink:"/otivSimulator/Simulator/Settings",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Simulator/Settings.md",tags:[],version:"current",frontMatter:{id:"Settings",title:"Settings",sidebar_label:"Settings"},sidebar:"documentationSidebar",previous:{title:"Simulator",permalink:"/otivSimulator/Simulator/"},next:{title:"How to use?",permalink:"/otivSimulator/Simulator/Usage"}},a={},c=[{value:"Settings Details",id:"settings-details",level:2},{value:"SEED",id:"seed",level:3},{value:"TrackSegmentationDistance",id:"tracksegmentationdistance",level:3},{value:"DANGER LEVELS",id:"danger-levels",level:3},{value:"TRAM",id:"tram",level:3},{value:"Physics Settings",id:"physics-settings",level:4},{value:"TRAFFIC",id:"traffic",level:3},{value:"Weather",id:"weather",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"settings",children:"Settings"}),"\n",(0,i.jsxs)(n.p,{children:["The simulator contains two JSON files, one of which configures various aspects of the simulator's operation, named ",(0,i.jsx)(n.code,{children:"settings_tram_sim.json"}),". Here are the settings available in this file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n  "seed": 23852,\r\n  "trackSegmentationDistance": "85",\r\n  "vehiclesDangerLevel": "0.0f",\r\n  "pedestriansDangerLevel": "0.0f",\r\n  "tramCollision": true,\r\n  "dataCollectionMode": true,\r\n  "automatedDriving": true,\r\n  "tramMass": 39500,\r\n  "tramMaxSpeed": 35,\r\n  "enginePower": 590,\r\n  "brakingForce": 2400,\r\n  "pedestriansCount": 2000,\r\n  "vehiclesCount": 2000,\r\n  "weatherType": "ClearSkies",\r\n  "dynamicSeasons": true,\r\n  "dateTime": "2022-07-07 9:30:00"\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"settings-details",children:"Settings Details"}),"\n",(0,i.jsx)(n.h3,{id:"seed",children:"SEED"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Determines the random variables in the simulator. Setting the seed to a specific number ensures that the same random events occur each time the simulator runs. For example, if a car randomly drives in front of the tram after 2 minutes of simulation, it will consistently do so upon every launch with the same seed."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tracksegmentationdistance",children:"TrackSegmentationDistance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Important for the segmentation of Airsim. The tram tracks have an invisible mesh used for segmentation. This setting ensures that the segmentation mask only shows these invisible meshes up to a certain distance, keeping them hidden in normal camera views but visible in segmentation masks."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"danger-levels",children:"DANGER LEVELS"}),"\n",(0,i.jsx)(n.p,{children:"These settings control the recklessness of vehicles and pedestrians in traffic."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"vehiclesDangerLevel"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," float (0-1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Controls how recklessly vehicles behave."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pedestriansDangerLevel"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," float (0-1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Controls how recklessly pedestrians behave, such as randomly crossing streets without crosswalks. Each AI spawns with a random danger level, but these settings influence the likelihood of high or low danger levels."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tram",children:"TRAM"}),"\n",(0,i.jsx)(n.p,{children:"Settings specific to the tram's behavior and physics."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tramCollision"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," boolean"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Controls whether the tram can collide with other objects. If disabled, vehicles can drive through the tram."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"automatedDriving"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," boolean"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Enables or disables automated driving. If enabled, the tram drives automatically without stopping. If disabled, the tram can be controlled via Python."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"physics-settings",children:"Physics Settings"}),"\n",(0,i.jsx)(n.p,{children:"These settings control the physical properties and performance of the tram."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tramMass"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Mass of the tram."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tramMaxSpeed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Maximum speed of the tram."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"enginePower"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Power of the tram's engine."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"brakingForce"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Braking force of the tram."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"traffic",children:"TRAFFIC"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pedestriansCount"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Number of pedestrians in the simulation world."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"vehiclesCount"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," int"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Number of vehicles in the simulation world."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"weather",children:"Weather"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"weatherType"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),' Type of weather in the simulation. Example: "ClearSkies".']}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"dynamicSeasons"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," boolean"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," Enables or disables dynamic seasons in the simulation."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"dateTime"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type:"})," string (datetime)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"}),' Sets the simulation\'s date and time. Example: "2022-07-07 9:30:00".']}),"\n"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);