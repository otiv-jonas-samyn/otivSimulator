"use strict";(self.webpackChunkotiv_simulator_doc=self.webpackChunkotiv_simulator_doc||[]).push([[7611],{2182:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(4848),i=n(8453);const s={id:"Settings",title:"Settings",sidebar_label:"Settings"},a="Settings",o={id:"Simulator/Settings",title:"Settings",description:"The simulator contains two JSON files, one of which configures various aspects of the simulator's operation, named settingstramsim.json. Here are the settings available in this file:",source:"@site/docs/Simulator/Settings.md",sourceDirName:"Simulator",slug:"/Simulator/Settings",permalink:"/otivSimulator/docs/Simulator/Settings",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Simulator/Settings.md",tags:[],version:"current",frontMatter:{id:"Settings",title:"Settings",sidebar_label:"Settings"},sidebar:"documentationSidebar",previous:{title:"Simulator",permalink:"/otivSimulator/docs/Simulator/"},next:{title:"Usage",permalink:"/otivSimulator/docs/Simulator/Usage"}},l={},c=[];function m(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"settings",children:"Settings"}),"\n",(0,r.jsxs)(t.p,{children:["The simulator contains two JSON files, one of which configures various aspects of the simulator's operation, named ",(0,r.jsx)(t.code,{children:"settings_tram_sim.json"}),". Here are the settings available in this file:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\r\n  "seed": 23852,\r\n  "trackSegmentationDistance": "85",\r\n  "vehiclesDangerLevel": "0.0f",\r\n  "pedestriansDangerLevel": "0.0f",\r\n  "tramCollision": true,\r\n  "dataCollectionMode": true,\r\n  "automatedDriving": true,\r\n  "tramMass": 39500,\r\n  "tramMaxSpeed": 35,\r\n  "enginePower": 590,\r\n  "brakingForce": 2400,\r\n  "pedestriansCount": 2000,\r\n  "vehiclesCount": 2000,\r\n  "weatherType": "ClearSkies",\r\n  "dynamicSeasons": true,\r\n  "dateTime": "2022-07-07 9:30:00"\r\n}\r\n\r\n## Settings Details\r\n\r\n### SEED\r\n- **Type:** int\r\n- **Description:** Determines the random variables in the simulator. Setting the seed to a specific number ensures that the same random events occur each time the simulator runs. For example, if a car randomly drives in front of the tram after 2 minutes of simulation, it will consistently do so upon every launch with the same seed.\r\n\r\n### TrackSegmentationDistance\r\n- **Type:** int\r\n- **Description:** Important for the segmentation of Airsim. The tram tracks have an invisible mesh used for segmentation. This setting ensures that the segmentation mask only shows these invisible meshes up to a certain distance, keeping them hidden in normal camera views but visible in segmentation masks.\r\n\r\n### DANGER LEVELS\r\nThese settings control the recklessness of vehicles and pedestrians in traffic.\r\n\r\n- **vehiclesDangerLevel**\r\n  - **Type:** float (0-1)\r\n  - **Description:** Controls how recklessly vehicles behave.\r\n- **pedestriansDangerLevel**\r\n  - **Type:** float (0-1)\r\n  - **Description:** Controls how recklessly pedestrians behave, such as randomly crossing streets without crosswalks. Each AI spawns with a random danger level, but these settings influence the likelihood of high or low danger levels.\r\n\r\n### TRAM\r\nSettings specific to the tram\'s behavior and physics.\r\n\r\n- **tramCollision**\r\n  - **Type:** boolean\r\n  - **Description:** Controls whether the tram can collide with other objects. If disabled, vehicles can drive through the tram.\r\n- **automatedDriving**\r\n  - **Type:** boolean\r\n  - **Description:** Enables or disables automated driving. If enabled, the tram drives automatically without stopping. If disabled, the tram can be controlled via Python.\r\n\r\n#### Physics Settings\r\nThese settings control the physical properties and performance of the tram.\r\n\r\n- **tramMass**\r\n  - **Type:** int\r\n  - **Description:** Mass of the tram.\r\n- **tramMaxSpeed**\r\n  - **Type:** int\r\n  - **Description:** Maximum speed of the tram.\r\n- **enginePower**\r\n  - **Type:** int\r\n  - **Description:** Power of the tram\'s engine.\r\n- **brakingForce**\r\n  - **Type:** int\r\n  - **Description:** Braking force of the tram.\r\n\r\n### TRAFFIC\r\n- **pedestriansCount**\r\n  - **Type:** int\r\n  - **Description:** Number of pedestrians in the simulation world.\r\n- **vehiclesCount**\r\n  - **Type:** int\r\n  - **Description:** Number of vehicles in the simulation world.\r\n\r\n### Weather\r\n- **weatherType**\r\n  - **Type:** string\r\n  - **Description:** Type of weather in the simulation. Example: "ClearSkies".\r\n- **dynamicSeasons**\r\n  - **Type:** boolean\r\n  - **Description:** Enables or disables dynamic seasons in the simulation.\r\n- **dateTime**\r\n  - **Type:** string (datetime)\r\n  - **Description:** Sets the simulation\'s date and time. Example: "2022-07-07 9:30:00".\r\n\r\n\r\n\r\n\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);